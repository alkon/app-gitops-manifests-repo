opentelemetry-collector:
  mode: deployment
  image:
    repository: "otel/opentelemetry-collector-contrib"
    tag: "0.128.0"

  config:
    receivers:
      otlp:
        protocols:
          grpc: {}  # OTLP gRPC (usually 4317)
          http: {}  # OTLP HTTP (usually 4318)

      hostmetrics:
        collection_interval: 5s
        scrapers:
          cpu:
          memory:
          disk:
          filesystem:
          network:
          load:

    processors:
      batch: {}

      metricsgeneration:
        # Rules to convert spans to RED (Request, Error, Duration)  metrics
        rules:
          # 1. Request rate from span count
          - name: http_request_rate
            type: calculate
            metric1: spans_total  # Metric that counts all spans
            operation: multiply
            metric2: one_per_second  # a constant you might emit from elsewhere (or skip)

          # 2. Error rate from spans with 5xx
          - name: http_errors_5xx_total
            type: calculate
            metric1: spans_http_5xx  # Must be filtered previously via a processor or custom tag
            operation: add
            metric2: zero  # Optional filler if metric1 is enough

          # 3. Latency in seconds
          - name: http_request_duration_seconds
            type: scale
            metric1: span.duration
            scale_by: 0.000001  # Convert from microseconds (or nanoseconds) to seconds

            #        - name:         # (string)  The **new metric name** (REQUIRED)
            #        - type:         # (string) Either **calculate** or **scale** (REQUIRED)
            #        - metric1:      # (string)  Base source metric for both types (REQUIRED)
            #        - metric2:      # (string)  Only for **calculate** rules (OPTIONAL)
            #        - operation:    # (string) For calculate, e.g., add/subtract/etc. (OPTIONAL)
            #        - scale_by:     # (number)  For scale rules only (OPTIONAL)
            #        - unit:         # (string, optional) Metric unit (e.g., "s", "1") (OPTIONAL)


    exporters:
      prometheus:
        endpoint: "0.0.0.0:8889"  # Exposes all metrics, including RED, for Prometheus/Thanos scraping

      prometheusremotewrite:
        endpoint: "http://thanos-receiver-receive.thanos-ns.svc.cluster.local:19291/api/v1/receive"
        tls:
          insecure_skip_verify: true
        resource_to_telemetry_conversion:
          enabled: true

      debug:
        verbosity: detailed

      otlp:
        endpoint: "tempo-app.monitoring.svc.cluster.local:4317"
        tls:
          insecure: true

    extensions:
      health_check:
        endpoint: "0.0.0.0:13133"
      pprof:
        endpoint: "0.0.0.0:1777"
      zpages:
        endpoint: "0.0.0.0:55679"

    service:
      telemetry:
        logs:
          level: debug
        metrics:
          address: "0.0.0.0:8888"  # Also for internal collector metrics (same port is OK)

      extensions:
        - health_check
        - pprof
        - zpages

      pipelines:
        traces:
          receivers:
            - otlp
          processors:
            - batch
          exporters:
            - otlp # Sends raw traces to Tempo

        metrics:
          receivers:
            - otlp
            - hostmetrics
          processors:
            - metricsgeneration  # Converts spans to RED metrics
            - batch
          exporters:
            - prometheus
            - prometheusremotewrite
            - debug


