opentelemetry-collector:
  mode: deployment
  image:
    repository: "otel/opentelemetry-collector-contrib"
    tag: "0.128.0"

  config:
    receivers:
      # Accept metrics and traces from instrumented apps (via OTLP)
      otlp:
        protocols:
          grpc: {}
          http: {}

      # Collect host-level metrics
      hostmetrics:
        collection_interval: 5s
        scrapers:
          cpu:
          memory:
          disk:
          filesystem:
          network:
          load:

    processors:
      # Batch for improved performance and throughput
      batch: {}

      # Convert traces to RED metrics (span-level metrics)
      spanmetrics:
        metrics_exporter: prometheus  # Required: which exporter will expose metrics
        dimensions:
          - name: http.method
          - name: http.status_code
          - name: service.name
        exemplars:
          enabled: true

    exporters:
      # Debug exporter logs output — useful during testing
      debug:
        verbosity: detailed

      # For metrics → Thanos via remote_write
      prometheusremotewrite:
        endpoint: http://thanos-receiver-receive.thanos-ns.svc.cluster.local:19291/api/v1/receive
        tls:
          insecure_skip_verify: true
        resource_to_telemetry_conversion:
          enabled: true

      # Prometheus exporter — used by spanmetrics processor
      prometheus:
        endpoint: 0.0.0.0:8889  # This endpoint will be scraped by Prometheus

      # For traces → Tempo
      otlp:
        endpoint: tempo-app.monitoring.svc.cluster.local:4317
        tls:
          insecure: true  # Suitable for dev/test

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679

    service:
      telemetry:
        logs:
          level: debug
        metrics:
          address: 0.0.0.0:8888  # default internal collector metrics

      extensions:
        - health_check
        - pprof
        - zpages

      pipelines:
        metrics:
          receivers:
            - otlp
            - hostmetrics
          processors:
            - batch
          exporters:
            - debug
            - prometheusremotewrite
            - prometheus  # <-- Required to expose spanmetrics metrics

        traces:
          receivers:
            - otlp
          processors:
            - spanmetrics  # <-- Converts traces to metrics
            - batch
          exporters:
            - debug
            - otlp

  # Optional: Expose port 8889 for spanmetrics (prometheus scrape target)
  service:
    enabled: true
    ports:
      - name: prom-spanmetrics
        port: 8889
        targetPort: 8889
