opentelemetry-collector:
  mode: deployment
  image:
    repository: "otel/opentelemetry-collector-contrib"
    tag: "0.130.0"  # Matches appVersion for proper compatibility

  config:
    receivers:
      otlp:
        protocols:
          grpc: {}  # OTLP gRPC (port 4317)
          http: {}  # OTLP HTTP (port 4318)

      hostmetrics:
        collection_interval: 5s
        scrapers:
          cpu:
          memory:
          disk:
          filesystem:
          network:
          load:

    connectors:
      spanmetrics:  # Connector that converts spans to RED metrics
        histogram:
          explicit:
            buckets: [100us, 1ms, 10ms, 50ms, 100ms, 250ms, 500ms, 1s]
        dimensions:
          - name: http.method
            default: GET
          - name: http.status_code
        metrics_flush_interval: 15s

    processors:
      batch: {}

      # metricsgeneration:
      #   # Rules to convert base spanmetrics to custom RED (Request, Error, Duration) metrics
      #   rules:
      #     # 1. Request rate (derived from span count)
      #     - name: http_request_rate
      #       type: calculate
      #       metric1: calls_total  # Comes from spanmetrics
      #       operation: multiply
      #       metric2: one_per_second  # Optional constant to shape rate

      #     # 2. Error rate (spans tagged with 5xx status code)
      #     - name: http_errors_5xx_total
      #       type: calculate
      #       metric1: calls_total{http.status_code=~"5.."}  # Filter 5xx errors
      #       operation: add
      #       metric2: zero  # Optional filler

      #     # 3. Request duration in seconds
      #     - name: http_request_duration_seconds
      #       type: scale
      #       metric1: duration  # Comes from spanmetrics as histogram/sum
      #       scale_by: 0.000001  # Convert microseconds to seconds

    exporters:
      prometheus:
        endpoint: "0.0.0.0:8889"  # For Prometheus/Thanos scraping

      prometheusremotewrite:
        endpoint: "http://thanos-receiver-receive.thanos-ns.svc.cluster.local:19291/api/v1/receive"
        tls:
          insecure_skip_verify: true
        resource_to_telemetry_conversion:
          enabled: true

      debug:
        verbosity: detailed

      otlp:
        endpoint: "tempo-app.monitoring.svc.cluster.local:4317"
        tls:
          insecure: true

    extensions:
      health_check:
        endpoint: "0.0.0.0:13133"
      pprof:
        endpoint: "0.0.0.0:1777"
      zpages:
        endpoint: "0.0.0.0:55679"

    service:
      telemetry:
        logs:
          level: debug
        metrics:
          address: "0.0.0.0:8888"  # Collector internal metrics

      extensions:
        - health_check
        - pprof
        - zpages

      pipelines:
        traces:
          receivers:
            - otlp
          exporters:
            - spanmetrics  # Send spans to spanmetrics connector
            - otlp         # Also send to Tempo
          processors:
            - batch

        metrics:
          receivers:
            - spanmetrics  # Metrics generated from spans (RED-style)
            - hostmetrics  # System-level metrics
          # processors:
          #   - metricsgeneration  # Commented: already handled by spanmetrics connector
          processors:
            - batch
          exporters:
            - prometheus
            - prometheusremotewrite
            - debug
