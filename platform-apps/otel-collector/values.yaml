opentelemetry-collector:
  mode: deployment
  image:
    repository: "otel/opentelemetry-collector-contrib"
    tag: "0.128.0"

  config:
    receivers:
      # Receives telemetry data from instrumented apps
      otlp:
        protocols:
          grpc: {}
          http: {}

      # Collect host-level metrics
      hostmetrics:
        collection_interval: 5s
        scrapers:
          cpu:
          memory:
          disk:
          filesystem:
          network:
          load:

    processors:
      # Batches telemetry for efficiency
      batch: {}

      # Converts spans (traces) into RED metrics
      spanmetrics:
        metrics_exporter: prometheus  # Required: name of the exporter that will expose metrics
        dimensions:
          - name: http.method         # Useful RED dimension
          - name: http.status_code    # Status codes for error rate tracking
          - name: service.name        # To group spans by service
        exemplars:
          enabled: true               # Adds trace exemplars to metrics (for linking metrics ↔ traces)

    exporters:
      # Debug exporter for logging all telemetry
      debug:
        verbosity: detailed

      # Exports metrics to Thanos via remote_write
      prometheusremotewrite:
        endpoint: http://thanos-receiver-receive.thanos-ns.svc.cluster.local:19291/api/v1/receive
        tls:
          insecure_skip_verify: true
        resource_to_telemetry_conversion:
          enabled: true

      # Prometheus exporter — required by `spanmetrics` to emit RED metrics
      prometheus:
        endpoint: 0.0.0.0:8889  # Exposes metrics from spanmetrics processor

      # Exports traces to Tempo
      otlp:
        endpoint: tempo-app.monitoring.svc.cluster.local:4317
        tls:
          insecure: true

    extensions:
      # Standard OTEL extensions
      health_check:
        endpoint: 0.0.0.0:13133
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679

    service:
      telemetry:
        logs:
          level: debug
        metrics:
          address: 0.0.0.0:8888  # Collector internal metrics (not spanmetrics)

      extensions:
        - health_check
        - pprof
        - zpages

      pipelines:
        # Metrics pipeline for host & app metrics
        metrics:
          receivers:
            - otlp
            - hostmetrics
          processors:
            - batch
          exporters:
            - debug
            - prometheusremotewrite
            - prometheus  # Required to expose spanmetrics metrics

        # Traces pipeline that feeds spanmetrics → RED metrics
        traces:
          receivers:
            - otlp
          processors:
            - spanmetrics  # Converts spans to metrics
            - batch
          exporters:
            - debug
            - otlp

  # Exposes an additional Kubernetes service for scraping spanmetrics (port 8889)
  extraService:
    enabled: true
    ports:
      - name: prom-spanmetrics
        port: 8889
        targetPort: 8889
