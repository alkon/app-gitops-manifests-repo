global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""
  security:
    allowInsecureImages: false
  compatibility:
    openshift:
      adaptSecurityContext: auto
kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
extraDeploy: []
image:
  registry: docker.io
  repository: bitnami/thanos
  tag: 0.37.2-debian-12-r9
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
objstoreConfig: "" # <-- IMPORTANT: You MUST fill this with your object storage configuration (e.g., S3, GCS, Azure Blob Storage config)
# OR provide an existing secret name here:
# existingObjstoreSecret: "your-objstore-secret-name"
indexCacheConfig: ""
bucketCacheConfig: ""
existingObjstoreSecret: ""
existingObjstoreSecretItems: []
httpConfig: ""
existingHttpConfigSecret: ""
https:
  enabled: false
  autoGenerated: false
  existingSecret: ""
  certFilename: "tls.crt"
  keyFilename: "tls.key"
  caFilename: "ca.crt"
  key: ""
  cert: ""
  ca: ""
  clientAuthType: ""
  extraTlsServerConfig: {}
auth:
  basicAuthUsers: {}
query:
  enabled: false # Disabled for Receiver-only
  logLevel: info
  logFormat: logfmt
  replicaLabel: [replica]
  dnsDiscovery:
    enabled: true
    sidecarsService: ""
    sidecarsNamespace: ""
  stores: []
  sdConfig: ""
  existingSDConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  revisionHistoryLimit: 10
  updateStrategy:
    type: RollingUpdate
  containerPorts:
    http: 10902
    grpc: 10901
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "nano"
  resources: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  podAntiAffinityPresetTopologyKey: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  dnsConfig: {}
  dnsPolicy: ""
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  grpc:
    server:
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        clientAuthEnabled: true
        existingSecret: {}
    client:
      serverName: ""
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  service:
    type: ClusterIP
    ports:
      http: 9090
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    labels: {}
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
    headless:
      annotations: {}
  serviceGrpc:
    type: ClusterIP
    ports:
      grpc: 10901
    nodePorts:
      grpc: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    labels: {}
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
    headless:
      annotations: {}
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  rbac:
    create: false
    rules: []
  pspEnabled: false
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
    targetPodMetrics: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ingress:
    enabled: false
    hostname: thanos.local
    secretName: ""
    ingressClassName: ""
    labels: {}
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls: false
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
    grpc:
      enabled: false
      hostname: thanos-grpc.local
      secretName: ""
      ingressClassName: ""
      annotations: {}
      extraHosts: []
      extraTls: []
      secrets: []
      extraRules: []
      tls: false
      selfSigned: false
      apiVersion: ""
      path: /
      pathType: ImplementationSpecific
queryFrontend:
  enabled: false # Disabled for Receiver-only
  logLevel: info
  logFormat: logfmt
  config: ""
  existingConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  revisionHistoryLimit: 10
  updateStrategy:
    type: RollingUpdate
  containerPorts:
    http: 9090
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "nano"
  resources: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  dnsConfig: {}
  dnsPolicy: ""
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  service:
    type: ClusterIP
    ports:
      http: 9090
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    labels: {}
    extraPorts: []
    labelSelectorsOverride: {}
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  rbac:
    create: false
    rules: []
  pspEnabled: false
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ingress:
    enabled: false
    hostname: thanos.local
    overrideAlertQueryURL: true
    ingressClassName: ""
    labels: {}
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls: false
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
bucketweb:
  enabled: false # Disabled for Receiver-only
  logLevel: info
  logFormat: logfmt
  refresh: 30m
  timeout: 5m
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  revisionHistoryLimit: 10
  updateStrategy:
    type: RollingUpdate
  containerPorts:
    http: 8080
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "nano"
  resources: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  dnsConfig: {}
  dnsPolicy: ""
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  service:
    type: ClusterIP
    ports:
      http: 8080
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    labels: {}
    extraPorts: []
    labelSelectorsOverride: {}
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  rbac:
    create: false
    rules: []
  pspEnabled: false
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ingress:
    enabled: false
    hostname: thanos.local
    ingressClassName: ""
    labels: {}
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls: false
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
receive:
  enabled: true # Enabled for Receiver-only
  logLevel: info
  logFormat: logfmt
  replicaCount: 1
  revisionHistoryLimit: 10
  updateStrategy:
    type: RollingUpdate
  containerPorts:
    grpc: 10901
    http: 10902
    remote: 19291
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "nano"
  resources: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  podAntiAffinityPresetTopologyKey: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  dnsConfig: {}
  dnsPolicy: ""
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  grpc:
    server:
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        clientAuthEnabled: true
        existingSecret: {}
    client:
      serverName: ""
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  service:
    type: ClusterIP
    ports:
      http: 10902
      remote: 19291
    nodePorts:
      http: ""
      remote: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    labels: {}
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
    headless:
      annotations: {}
  serviceGrpc:
    type: ClusterIP
    ports:
      grpc: 10901
    nodePorts:
      grpc: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    labels: {}
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
    headless:
      annotations: {}
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  rbac:
    create: false
    rules: []
  pspEnabled: false
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
    targetPodMetrics: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ingress:
    enabled: false
    hostname: thanos.local
    secretName: ""
    ingressClassName: ""
    labels: {}
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls: false
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
storegateway:
  enabled: false # Disabled for Receiver-only
  logLevel: info
  logFormat: logfmt
  replicaLabel: [replica]
  dnsDiscovery:
    enabled: true
    sidecarsService: ""
    sidecarsNamespace: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  revisionHistoryLimit: 10
  updateStrategy:
    type: RollingUpdate
  containerPorts:
    http: 10902
    grpc: 10901
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "nano"
  resources: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  podAntiAffinityPresetTopologyKey: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  dnsConfig: {}
  dnsPolicy: ""
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  grpc:
    server:
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        clientAuthEnabled: true
        existingSecret: {}
    client:
      serverName: ""
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  service:
    type: ClusterIP
    ports:
      http: 9090
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    labels: {}
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
    headless:
      annotations: {}
  serviceGrpc:
    type: ClusterIP
    ports:
      grpc: 10901
    nodePorts:
      grpc: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    labels: {}
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
    headless:
      annotations: {}
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  rbac:
    create: false
    rules: []
  pspEnabled: false
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
    targetPodMetrics: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ingress:
    enabled: false
    hostname: thanos.local
    secretName: ""
    ingressClassName: ""
    labels: {}
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls: false
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
compact:
  enabled: false # Disabled for Receiver-only
  logLevel: info
  logFormat: logfmt
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  revisionHistoryLimit: 10
  updateStrategy:
    type: Recreate
  containerPorts:
    http: 10902
    grpc: 10901
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "nano"
  resources: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  podAntiAffinityPresetTopologyKey: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  dnsConfig: {}
  dnsPolicy: ""
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  grpc:
    server:
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        clientAuthEnabled: true
        existingSecret: {}
    client:
      serverName: ""
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  rbac:
    create: false
    rules: []
  pspEnabled: false
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
ruler:
  enabled: false # Disabled for Receiver-only
  logLevel: info
  logFormat: logfmt
  replicaLabel: [replica]
  config: ""
  existingConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  revisionHistoryLimit: 10
  updateStrategy:
    type: RollingUpdate
  containerPorts:
    http: 10902
    grpc: 10901
    web: 9090
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "nano"
  resources: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  podAntiAffinityPresetTopologyKey: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  dnsConfig: {}
  dnsPolicy: ""
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  grpc:
    server:
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        clientAuthEnabled: true
        existingSecret: {}
    client:
      serverName: ""
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  service:
    type: ClusterIP
    ports:
      http: 9090
      web: 9090
    nodePorts:
      http: ""
      web: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    labels: {}
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
    headless:
      annotations: {}
  serviceGrpc:
    type: ClusterIP
    ports:
      grpc: 10901
    nodePorts:
      grpc: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    labels: {}
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
    headless:
      annotations: {}
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  rbac:
    create: false
    rules: []
  pspEnabled: false
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
    targetPodMetrics: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ingress:
    enabled: false
    hostname: thanos.local
    secretName: ""
    ingressClassName: ""
    labels: {}
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls: false
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
sidecar:
  enabled: false # Disabled for Receiver-only
  logLevel: info
  logFormat: logfmt
  queryPort: 10901
  httpPort: 10902
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "nano"
  resources: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extraVolumes: []
  extraVolumeMounts: []
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
volumePermissions:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/kubectl
    tag: 1.29.3-debian-11-r2
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resourcesPreset: "nano"
  resources: {}
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 0
    runAsGroup: 0
    runAsNonRoot: false
    privileged: false
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"